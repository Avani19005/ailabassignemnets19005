# -*- coding: utf-8 -*-
"""ASS1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J6sprUyxwC3YiVJvKMb7RVIFiQ5IRLQ5
"""

# Marks for 10 students in Maths, Science, English, IT
marks = [
    [85, 76, 90, 82],
    [92, 88, 78, 85],
    [75, 82, 95, 79],
    [88, 90, 72, 84],
    [79, 85, 88, 91],
    [91, 77, 84, 86],
    [83, 89, 80, 93],
    [76, 81, 92, 87],
    [84, 78, 85, 90],
    [90, 84, 79, 88]
]

subjects = ['Maths', 'Science', 'English', 'IT']

# For each subject
for i in range(4):
    subject_marks = [student[i] for student in marks]
    print(f"\n{subjects[i]} Results:")
    print(f"Highest: {max(subject_marks)}")
    print(f"Lowest: {min(subject_marks)}")
    print(f"Average: {sum(subject_marks)/len(subject_marks):.2f}")

# Overall results
all_marks = [mark for student in marks for mark in student]
print("\nOverall Results:")
print(f"Highest: {max(all_marks)}")
print(f"Lowest: {min(all_marks)}")
print(f"Average: {sum(all_marks)/len(all_marks):.2f}")

basic_salary = float(input("Enter basic salary: "))

if basic_salary <= 10000:
    hra = basic_salary * 0.20
    da = basic_salary * 0.80
elif basic_salary <= 20000:
    hra = basic_salary * 0.25
    da = basic_salary * 0.90
else:
    hra = basic_salary * 0.30
    da = basic_salary * 0.95

gross_salary = basic_salary + hra + da
print(f"Gross Salary: {gross_salary:.2f}")

import re

password = input("Enter password: ")

if len(password) < 6 or len(password) > 16:
    print("Password must be 6-16 characters long")
elif not re.search("[a-z]", password):
    print("Password needs at least 1 lowercase letter")
elif not re.search("[A-Z]", password):
    print("Password needs at least 1 uppercase letter")
elif not re.search("[0-9]", password):
    print("Password needs at least 1 number")
elif not re.search("[$#@]", password):
    print("Password needs at least 1 special character ($#@)")
else:
    print("Password is valid!")

L = [10, 20, 30, 40, 50, 60, 70, 80]

# (i) Add 200 and 300
L.append(200)
L.append(300)
print("After adding:", L)

# (ii) Remove 10 and 30
L.remove(10)
L.remove(30)
print("After removing:", L)

# (iii) Sort ascending
L.sort()
print("Ascending order:", L)

# (iv) Sort descending
L.sort(reverse=True)
print("Descending order:", L)

D = {1:"One", 2:"Two", 3:"Three", 4:"Four", 5:"Five"}

# (i) Add key 6
D[6] = "Six"
print("After adding:", D)

# (ii) Remove key 2
del D[2]
print("After removing:", D)

# (iii) Check if 6 is present
print("Is 6 present?", 6 in D)

# (iv) Count elements
print("Number of elements:", len(D))

# (v) Add all values
all_values = " ".join(D.values())
print("All values:", all_values)

import random
import math

numbers = [random.randint(100, 900) for _ in range(100)]

# (i) Odd numbers
odds = [n for n in numbers if n % 2 != 0]
print(f"Odd numbers ({len(odds)}):", odds)

# (ii) Even numbers
evens = [n for n in numbers if n % 2 == 0]
print(f"\nEven numbers ({len(evens)}):", evens)

# (iii) Prime numbers
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

primes = [n for n in numbers if is_prime(n)]
print(f"\nPrime numbers ({len(primes)}):", primes)

# Save this as interest.py
def compound_interest(principal, rate, time):
    amount = principal * (1 + rate/100) ** time
    return amount - principal

# In another file:
# from interest import compound_interest
# ci = compound_interest(1000, 5, 2)
# print("Compound Interest:", ci)

# A) Restaurant Class
class Restaurant:
    def __init__(self, name, cuisine):
        self.restaurant_name = name
        self.cuisine_type = cuisine

    def describe_restaurant(self):
        print(f"{self.restaurant_name} serves {self.cuisine_type} cuisine")

    def open_restaurant(self):
        print(f"{self.restaurant_name} is now open!")

restaurant = Restaurant("Tasty Bites", "Italian")
print(restaurant.restaurant_name)
print(restaurant.cuisine_type)
restaurant.describe_restaurant()
restaurant.open_restaurant()

# B) User Class
class User:
    def __init__(self, first, last, age, email):
        self.first_name = first
        self.last_name = last
        self.age = age
        self.email = email

    def describe_user(self):
        print(f"User: {self.first_name} {self.last_name}")
        print(f"Age: {self.age}, Email: {self.email}")

    def greet_user(self):
        print(f"Hello {self.first_name}! Welcome back.")

user1 = User("John", "Doe", 30, "john@example.com")
user2 = User("Alice", "Smith", 25, "alice@example.com")

user1.describe_user()
user1.greet_user()

user2.describe_user()
user2.greet_user()